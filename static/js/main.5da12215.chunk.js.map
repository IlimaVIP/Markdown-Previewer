{"version":3,"sources":["components/edditor.jsx","components/preview.jsx","App.js","serviceWorker.js","index.js"],"names":["Editor","react_default","a","createElement","className","for","id","onChange","this","props","newText","value","textSet","Component","Preview","dangerouslySetInnerHTML","marked","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","text","placeholder","bind","assertThisInitialized","getMarkdownText","event","setState","target","onTextChange","__html","renderer","edditor_Editor","preview_Preview","Renderer","setOptions","breaks","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RACqBA,mLAGf,OACGC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAOE,IAAI,SAASD,UAAU,SAA9B,0BACAH,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAAeE,GAAG,SAASC,SAAUC,KAAKC,MAAMC,QAASC,MAAOH,KAAKC,MAAMG,mBAPvEC,aCAfC,mLAGf,OACGb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,qCACAH,EAAAC,EAAAC,cAAA,OAAKG,GAAG,UAAUS,wBAAyBP,KAAKC,MAAMO,iBAN5BH,aCO/BI,qBACJ,SAAAA,EAAYR,GAAO,IAAAS,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAX,KAAAS,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAX,KAAAW,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAf,KAAMC,KACDe,MAAQ,CACXC,KAAMC,GAERR,EAAKR,QAAUQ,EAAKR,QAAQiB,KAAbR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KACfA,EAAKW,gBAAkBX,EAAKW,gBAAgBF,KAArBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KANNA,uEASXY,GACNtB,KAAKuB,SAAS,CACZN,KAAMK,EAAME,OAAOrB,QAEjBH,KAAKC,MAAMwB,cACbzB,KAAKC,MAAMwB,aAAaH,EAAME,OAAOrB,+CAGzBc,GAEd,MAAO,CAAES,OADOlB,IAAOS,EAAM,CAACU,SAAUA,sCAKxC,OACGlC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACZH,EAAAC,EAAAC,cAACiC,EAAD,CAAQ1B,QAASF,KAAKE,QAASE,QAAUJ,KAAKgB,MAAMC,OACpDxB,EAAAC,EAAAC,cAACkC,EAAD,CAASrB,OAAQR,KAAKqB,gBAAgBrB,KAAKgB,MAAMC,gBA3BzCZ,cAgCZsB,EAAW,IAAInB,IAAOsB,SAC5BtB,IAAOuB,WAAW,CAChBC,QAAQ,IAEV,IAAMd,EAAW,g6CA+EFT,IC/GKwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5da12215.chunk.js","sourcesContent":["import React, { Component } from 'react';\nexport default class Editor extends Component {\n    render() {\n      // console.log('Counter', this.props);\n      return (\n         <div className=\"editor_wrap\">\n          <div className=\"form-group\">\n            <label for=\"editor\" className=\"title\">Write something here: </label>\n            <textarea className=\"form-control\" id=\"editor\" onChange={this.props.newText} value={this.props.textSet}></textarea>\n          </div>\n        </div>\n      )\n    }\n  }","import React, { Component } from 'react';\nexport default class Preview extends Component {\n    render() {\n      // console.log(this.props)\n      return (\n         <div className=\"preview_wrap\">\n           <p className=\"title\">This is the result you will get: </p>\n           <div id=\"preview\" dangerouslySetInnerHTML={this.props.marked}></div>\n         </div>\n      )\n    }\n  }","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { Component } from 'react';\nimport marked from 'marked';\nimport Editor from './components/edditor';\nimport Preview from './components/preview';\n// import logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: placeholder\n    }\n    this.newText = this.newText.bind(this);\n    this.getMarkdownText = this.getMarkdownText.bind(this);\n  }\n  \n  newText(event) {\n    this.setState({\n      text: event.target.value\n    });\n    if (this.props.onTextChange) {\n      this.props.onTextChange(event.target.value);\n    }\n  }\n  getMarkdownText(text) {\n    let rawMarkup = marked(text, {renderer: renderer});\n    return { __html: rawMarkup };\n  }\n  \n  render() {\n    return (\n       <div className=\"main_wrapper\">\n          <Editor newText={this.newText} textSet={ this.state.text } />\n          <Preview marked={this.getMarkdownText(this.state.text)} />\n        </div>\n    );\n  }\n}\nconst renderer = new marked.Renderer();\nmarked.setOptions({\n  breaks: true,\n});\nconst placeholder =  \n`# H1\n## H2\n### H3\n\n*This text will be italic*\n_Wait for it ... this will also be italic_\n**This text will be bold**\n__And you guessed it right... this will also be bold__\n*You **can** combine them*\n\nAs Grace Hopper said:\n> Iâ€™ve always been more interested\n> in the future than in the past.\n\n* You could write some list\n* Item 2\n * Item 2a\n * Item 2b\n\n[I'm an inline-style link](https://www.google.com)\n\nOr leave it empty and use the [link text itself].\n\n\nInline-style: \n![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 1\")\n\nReference-style: \n![alt text][logo]\n\n[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 2\"\n\n\\`\\`\\`javascript\nvar s = \"JavaScript syntax highlighting\";\nalert(s);\n\\`\\`\\`\n \n\\`\\`\\`python\ns = \"Python syntax highlighting\"\nprint s\n\\`\\`\\`\n \n\\`\\`\\`\nNo language indicated, so no syntax highlighting. \nBut let's throw in a <b>tag</b>.\n\\`\\`\\`\n\nColons can be used to align columns.\n\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n\n\n\nMarkdown | Less | Pretty\n--- | --- | ---\n*Still* | \\`renders\\` | **nicely**\n1 | 2 | 3\n\nThree or more...\n\n---\n\nHyphens\n\n***\n\nAsterisks\n\n___\n\nUnderscores\n\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}